# runner.py
import json
import re
import ast
import os
import difflib
import subprocess
import sys
import tkinter as tk
from tkinter import messagebox
from gemini_client import chat
from security import is_dangerous_code, ask_user_confirmation
from dependency_manager import ensure_runtime_dependency, install_library
from context_collector import prepare_gui_context

LOG_FILE = "logs.json"
RETRY_LIMIT = 3

_latest_web_content = ""  # Bi·∫øn to√†n c·ª•c ƒë·ªÉ l∆∞u tr·ªØ n·ªôi dung web

def load_logs():
    if os.path.exists(LOG_FILE):
        with open(LOG_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    return {}

def save_logs(logs):
    with open(LOG_FILE, 'w', encoding='utf-8') as f:
        json.dump(logs, f, ensure_ascii=False, indent=2)

def extract_user_input(prompt):
    if "*" in prompt:
        user_part = prompt.split("*", 1)[1].strip()
    else:
        user_part = prompt.strip()

    lowered = user_part.lower()

    # üöÄ N·∫øu l√† y√™u c·∫ßu t·∫°o web, chu·∫©n h√≥a n·ªôi dung th√†nh y√™u c·∫ßu th·ªëng nh·∫•t
    if any(keyword in lowered for keyword in [
        "t·∫°o web", "giao di·ªán web", "html", "website", "trang web", "thi·∫øt k·∫ø web", "tms"
    ]):
        user_part = (
            f"T·∫†O WEB CHU·∫®N HTML\n"
            f"{user_part.strip()}\n"
            f"- Tr·∫£ v·ªÅ m√£ HTML ho√†n ch·ªânh trong chu·ªói Python, g√°n v√†o bi·∫øn 'html_content'.\n"
            f"- N·∫øu c√≥ CSS, h√£y nh√∫ng tr·ª±c ti·∫øp b·∫±ng th·∫ª <style> b√™n trong HTML, kh√¥ng t·∫°o file style.css ri√™ng.\n"
            f"- Kh√¥ng s·ª≠ d·ª•ng h√†m m·ªü tr√¨nh duy·ªát.\n"
            f"- Ph·∫£i k·∫øt th√∫c b·∫±ng '__step_success__ = True'."
        )

    return user_part.lower()


def match_existing_prompt(prompt, logs):
    user_input = extract_user_input(prompt)
    for key in logs:
        if user_input == extract_user_input(key):
            return logs[key]
    suggestions = difflib.get_close_matches(user_input, [extract_user_input(k) for k in logs.keys()], n=1, cutoff=0.8)
    if suggestions:
        root = tk.Tk()
        root.withdraw()
        confirm = messagebox.askyesno("X√°c nh·∫≠n", f"Y√™u c·∫ßu g·∫ßn gi·ªëng: {suggestions[0]}?\nCh·ªçn Yes ƒë·ªÉ s·ª≠ d·ª•ng.")
        root.destroy()
        for key in logs:
            if extract_user_input(key) == suggestions[0] and confirm:
                return logs[key]
    return None

def get_assigned_vars(code_str):
    assigned = set()
    try:
        tree = ast.parse(code_str)
        for node in ast.walk(tree):
            if isinstance(node, ast.Name) and isinstance(node.ctx, ast.Store):
                assigned.add(node.id)
            elif isinstance(node, ast.arg):
                assigned.add(node.arg)
    except Exception:
        pass
    return assigned

def install_missing_software_from_error(error_msg):
    if "No module named" in str(error_msg):
        module_name = str(error_msg).split("No module named")[-1].strip().strip("'").strip()
        print(f"üì¶ Ph√°t hi·ªán thi·∫øu module: {module_name}. ƒêang th·ª≠ c√†i ƒë·∫∑t...")
        install_library(module_name)
        return True
    elif "not recognized as an internal or external command" in str(error_msg):
        print("üõ†Ô∏è Ph√°t hi·ªán thi·∫øu ph·∫ßn m·ªÅm h·ªá th·ªëng. Vui l√≤ng ki·ªÉm tra v√† c√†i ƒë·∫∑t th·ªß c√¥ng n·∫øu c·∫ßn.")
        return False
    return False

def build_ai_prompt(prompt_only, system_info="", gui_context={}, installed_libs=""):
    full_context = (
        system_info + "\nTh√¥ng tin h·ªá th·ªëng chi ti·∫øt:\n" +
        json.dumps(gui_context, ensure_ascii=False) + "\n\n" +
        "C√°c th∆∞ vi·ªán Python ƒë√£ c√†i (∆∞u ti√™n s·ª≠ d·ª•ng c√°c th∆∞ vi·ªán n√†y khi sinh m√£):\n" +
        installed_libs
    )

    ai_prompt = (
        "Lu√¥n tr·∫£ l·ªùi B·∫ÆT BU·ªòC b·∫±ng ti·∫øng Vi·ªát trong M·ªåI tr∆∞·ªùng h·ª£p, bao g·ªìm m√¥ t·∫£, code, v√† m·ªçi n·ªôi dung kh√°c.\n"
        + full_context + "\n"
        "B·∫°n l√† tr·ª£ l√Ω AI c√≥ to√†n quy·ªÅn t∆∞∆°ng t√°c tr√™n h·ªá th·ªëng Windows hi·ªán t·∫°i.\n"
        "QUAN TR·ªåNG:\n"
        "- Ch·ªâ tr·∫£ v·ªÅ JSON d·∫°ng danh s√°ch step.\n"
        "- M·ªói step c√≥ th·ªÉ c√≥:\n"
        "  - step: m√¥ t·∫£ step\n"
        "  - purpose: m·ª•c ti√™u step\n"
        "  - code: ƒëo·∫°n code Python ƒë·∫ßy ƒë·ªß, ch·∫°y tr·ª±c ti·∫øp, kh√¥ng d√πng action, command, hay DSL kh√°c\n"
        "  - condition (tu·ª≥ ch·ªçn): code Python ki·ªÉm tra ƒëi·ªÅu ki·ªán, tr·∫£ v·ªÅ boolean, KH√îNG s·ª≠ d·ª•ng import\n"
        "  - rollback_code (tu·ª≥ ch·ªçn): code Python rollback ƒë·ªôc l·∫≠p\n"
        "  - post_check (tu·ª≥ ch·ªçn): code Python ki·ªÉm tra h·∫≠u k·ª≥, boolean thu·∫ßn, KH√îNG c√≥ import\n"
        "- KH√îNG d√πng action, command, object, DSL d·∫°ng automation.\n"
        "- M·ªåI code PH·∫¢I l√† Python thu·∫ßn, exec() ƒë∆∞·ª£c ngay.\n"
        "- Tr·∫£ v·ªÅ JSON s·∫°ch, kh√¥ng k√®m text gi·∫£i th√≠ch.\n"
        "- KH√îNG th√™m text m√¥ t·∫£ ngo√†i JSON.\n"
        "- V√≠ d·ª• ƒë√∫ng:\n"
        "[\n"
        "{\n"
        "  \"step\": \"Ki·ªÉm tra d·ªãch v·ª• Print Spooler\",\n"
        "  \"purpose\": \"Ki·ªÉm tra d·ªãch v·ª•\",\n"
        "  \"code\": \"import psutil\\nspooler_running = any(p.name() == 'spoolsv.exe' for p in psutil.process_iter())\\nprint(spooler_running)\\n__step_success__ = True\",\n"
        "  \"post_check\": \"spooler_running == True\"\n"
        "}\n"
        "]\n"
        f"Y√™u c·∫ßu: {prompt_only}"
    )
    return ai_prompt

def clean_and_validate_ai_response(raw_response, log_callback=None):
    try:
        json_text = re.search(r'\[\s*{.*?}\s*\]', raw_response, re.DOTALL).group(0)
        steps = json.loads(json_text)
        clean_steps = []
        for step in steps:
            valid_step = {
                'step': step.get('step', '').strip(),
                'purpose': step.get('purpose', '').strip(),
                'code': step.get('code', '').strip()
            }
            if 'condition' in step:
                valid_step['condition'] = step['condition'].strip()
            if 'rollback_code' in step:
                valid_step['rollback_code'] = step['rollback_code'].strip()
            if 'post_check' in step:
                valid_step['post_check'] = step['post_check'].strip()
            clean_steps.append(valid_step)
        return clean_steps
    except Exception as e:
        if log_callback: log_callback(f"‚ùå L·ªói tr√≠ch xu·∫•t ho·∫∑c l·ªçc JSON: {e}")
        if log_callback: log_callback(f"üìÑ Ph·∫£n h·ªìi:\n{raw_response}")
        return None

def handle_prompt(prompt, log_callback=None, system_info="", dashboard=None):
    logs = load_logs()
    prompt_only = extract_user_input(prompt)

    if not isinstance(prompt_only, str) or len(prompt_only.strip()) < 3:
        if log_callback: log_callback("‚ùó Prompt kh√¥ng h·ª£p l·ªá ho·∫∑c qu√° ng·∫Øn.")
        return {} # Tr·∫£ v·ªÅ dictionary r·ªóng ƒë·ªÉ nh·∫•t qu√°n

    existing = match_existing_prompt(prompt_only, logs)

    if existing:
        if log_callback: log_callback("‚ö° Y√™u c·∫ßu n√†y ƒë√£ t·ª´ng th·ª±c thi.")
        steps = existing
    else:
        if log_callback: log_callback("ƒêang x·ª≠ l√Ω...")
        gui_context = prepare_gui_context()
        try:
            installed_libs = subprocess.check_output(
                [sys.executable, "-m", "pip", "freeze"],
                universal_newlines=True,
                creationflags=subprocess.CREATE_NO_WINDOW  # ‚Üê th√™m d√≤ng n√†y
            )
        except Exception as e:
            installed_libs = f"[L·ªói khi l·∫•y danh s√°ch th∆∞ vi·ªán: {e}]"

        ai_prompt = build_ai_prompt(prompt_only, system_info, gui_context, installed_libs)
        response = chat.send_message(ai_prompt)

        raw = response.text.strip()
        steps = clean_and_validate_ai_response(raw, log_callback)
        if not steps:
            if log_callback: log_callback("‚ùå JSON kh√¥ng h·ª£p l·ªá sau l·ªçc.")
            return {} # Tr·∫£ v·ªÅ dictionary r·ªóng

    context = {}
    all_steps_success = True
    is_web_content = False

    for i, step in enumerate(steps):
        if dashboard:
            dashboard.check_control()

        if log_callback: log_callback(f"\nüß© Step {i+1}: {step.get('step', '')}")
        if log_callback: log_callback(f"üéØ M·ª•c ti√™u: {step.get('purpose', '')}")
        code = step.get('code', '').strip()
        if log_callback: log_callback("üìú Code:")
        if log_callback: log_callback(code)

        if 'condition' in step and step['condition']:
            try:
                if not eval(step['condition'], context):
                    if log_callback: log_callback("‚öôÔ∏è ƒêi·ªÅu ki·ªán kh√¥ng th·ªèa m√£n, b·ªè qua step.")
                    continue
            except Exception as e:
                if log_callback: log_callback(f"‚ùó L·ªói ƒë√°nh gi√° condition: {e}")

        assigned_vars = get_assigned_vars(code)
        retry_count = 0
        while retry_count < RETRY_LIMIT:
            retry_count += 1

            if dashboard:
                dashboard.check_control()

            try:
                ensure_runtime_dependency(code)
                if is_dangerous_code(code):
                    if not ask_user_confirmation(code):
                        if log_callback: log_callback("üö´ B·ªè qua do ng∆∞·ªùi d√πng t·ª´ ch·ªëi.")
                        all_steps_success = False
                        break
                exec(code, context)
                globals().update(context)

                # Ki·ªÉm tra v√† l∆∞u n·ªôi dung web n·∫øu c√≥
                for value in context.values():
                    if "html_content" in context and isinstance(context["html_content"], str):
                        global _latest_web_content
                        _latest_web_content = context["html_content"]
                        is_web_content = "<html" in _latest_web_content.lower()
                    else:
                        for value in context.values():
                            if isinstance(value, str) and "<html" in value.lower():
                                _latest_web_content = value
                                is_web_content = True
                                break

                if 'post_check' in step and step['post_check']:
                    try:
                        if not eval(step['post_check'], context):
                            if log_callback: log_callback(f"‚ùå H·∫≠u ki·ªÉm th·∫•t b·∫°i: {step['post_check']}")
                            all_steps_success = False
                            break
                    except Exception as e:
                        if log_callback: log_callback(f"‚ùó L·ªói h·∫≠u ki·ªÉm: {e}")
                        all_steps_success = False
                        break
                if '__step_success__' not in context or not context['__step_success__']:
                    raise RuntimeError("‚ùå Step kh√¥ng ƒë√°nh d·∫•u '__step_success__ = True'")
                break # Step th√†nh c√¥ng, tho√°t kh·ªèi v√≤ng l·∫∑p retry

            except Exception as e:
                if log_callback: log_callback(f"‚ùå Step l·ªói: {e}")
                installed = install_missing_software_from_error(e)
                if installed:
                    if log_callback: log_callback("üîÅ Th·ª≠ l·∫°i sau c√†i ƒë·∫∑t...")
                    continue

                if 'rollback_code' in step and step['rollback_code']:
                    try:
                        exec(step['rollback_code'], context)
                        if log_callback: log_callback("‚Ü©Ô∏è ƒê√£ rollback step.")
                    except Exception as re:
                        if log_callback: log_callback(f"‚ùó L·ªói rollback step: {re}")
                all_steps_success = False
                break
        else:
            if retry_count == RETRY_LIMIT:
                all_steps_success = False # N·∫øu h·∫øt s·ªë l·∫ßn th·ª≠ m√† v·∫´n l·ªói

        if not all_steps_success:
            break

    if not existing and all_steps_success:
        root = tk.Tk()
        root.withdraw()
        save_choice = messagebox.askyesno("L∆∞u y√™u c·∫ßu", "üì¶ B·∫°n c√≥ mu·ªën l∆∞u l·∫°i y√™u c·∫ßu n√†y ƒë·ªÉ d√πng sau kh√¥ng?")
        root.destroy()
        if save_choice:
            logs[prompt_only] = steps
            save_logs(logs)
            if log_callback: log_callback("‚úÖ ƒê√£ l∆∞u y√™u c·∫ßu v√†o logs.")
    elif not all_steps_success:
        if log_callback: log_callback("‚ö†Ô∏è M·ªôt s·ªë b∆∞·ªõc ƒë√£ th·∫•t b·∫°i, kh√¥ng l∆∞u v√†o logs.")

    result = {
        "completed": all_steps_success,
        "web_content": _latest_web_content,
        "is_web_content": is_web_content
    }

    if dashboard:
        dashboard.mark_completed()
        dashboard.update_preview(_latest_web_content, is_web_content)

    return result

def get_web_content():
    return _latest_web_content
