import subprocess
import sys
import os
import threading
import tkinter as tk
from tkinter import filedialog, messagebox
from tkinterdnd2 import DND_FILES, TkinterDnD
from PIL import Image
import pytesseract
from docx import Document
import fitz
import pandas as pd
import platform
import json
import pyperclip
from tkhtmlview import HTMLLabel
import tempfile
from PIL import Image, ImageGrab

CHAT_HISTORY_FILE = "chat_history.json"

# Utility functions
def ensure_lib_installed(lib_name, module_name=None):
    module_name = module_name or lib_name
    try:
        __import__(module_name)
    except ImportError:
        print(f"ƒêang c√†i ƒë·∫∑t th∆∞ vi·ªán: {lib_name}...")
        subprocess.check_call([sys.executable, "-m", "pip", "install", lib_name])

def load_chat_history():
    try:
        if os.path.exists(CHAT_HISTORY_FILE):
            with open(CHAT_HISTORY_FILE, "r", encoding="utf-8") as f:
                data = json.load(f)
                return data if isinstance(data, list) else []
    except json.JSONDecodeError:
        print("L·ªói ƒë·ªçc l·ªãch s·ª≠ chat, kh·ªüi t·∫°o m·ªõi.")
    return []

def save_chat_history(history):
    with open(CHAT_HISTORY_FILE, "w", encoding="utf-8") as f:
        json.dump(history, f, ensure_ascii=False, indent=2)

def bind_mousewheel(widget, command):
    def _on_mousewheel(event):
        command("scroll", -1 * int(event.delta / 120), "units")
        return "break"

    widget.bind_all("<MouseWheel>", _on_mousewheel)
    
def extract_text_from_file(file_path):
    import zipfile
    ext = file_path.lower()
    try:
        if ext.endswith(".zip"):
            result = []
            with zipfile.ZipFile(file_path, 'r') as zipf:
                text_files = [f for f in zipf.namelist() if f.endswith((
                    ".py", ".js", ".ts", ".html", ".css", ".json", ".csv", ".txt", ".md"
                ))]
                for f in text_files:
                    try:
                        with zipf.open(f) as zf:
                            content = zf.read().decode("utf-8", errors="ignore")
                            result.append(f"--- {f} ---\n{content}")
                    except Exception as e:
                        result.append(f"--- {f} ---\n[L·ªói ƒë·ªçc: {e}]")
            return "\n\n".join(result) or "[Zip kh√¥ng c√≥ file h·ª£p l·ªá]"

        elif ext.endswith((".png", ".jpg", ".jpeg", ".bmp")):
            img = Image.open(file_path)
            return pytesseract.image_to_string(img) or "[·∫¢nh kh√¥ng c√≥ text]"

        elif ext.endswith(".docx"):
            doc = Document(file_path)
            return "\n".join(p.text for p in doc.paragraphs if p.text.strip()) or "[Docx kh√¥ng c√≥ text]"

        elif ext.endswith(".pdf"):
            doc = fitz.open(file_path)
            return "\n".join(page.get_text() for page in doc) or "[PDF kh√¥ng c√≥ text/scan]"

        elif ext.endswith(".xlsx"):
            df = pd.read_excel(file_path)
            return df.to_string(index=False) or "[Excel tr·ªëng]"

        elif ext.endswith(".csv"):
            df = pd.read_csv(file_path)
            return df.to_string(index=False) or "[CSV tr·ªëng]"

        elif ext.endswith((".txt", ".py", ".log", ".json", ".md", ".html", ".css", ".js")):
            with open(file_path, "r", encoding="utf-8", errors="ignore") as f:
                return f.read() or "[File tr·ªëng]"
        else:
            try:
                with open(file_path, "r", encoding="utf-8", errors="ignore") as f:
                    return f.read() or "[File tr·ªëng]"
            except Exception:
                return f"[Kh√¥ng h·ªó tr·ª£ ƒë·ªãnh d·∫°ng {os.path.basename(file_path)}]"

    except Exception as e:
        return f"[L·ªói tr√≠ch xu·∫•t {os.path.basename(file_path)}: {e}]"

def split_text_smart(text, max_length):
    lines = text.splitlines()
    chunks = []
    current = []
    total = 0

    for line in lines:
        total += len(line) + 1
        current.append(line)
        if total >= max_length:
            chunks.append("\n".join(current))
            current = []
            total = 0
    if current:
        chunks.append("\n".join(current))

    return chunks

# UI Components
class Dashboard:
    def __init__(self, parent_frame, output_canvas):
        self.frame = tk.Frame(parent_frame, bg=BG_COLOR, width=400)
        self.frame.pack(fill="both", expand=True)
        self.text_log = tk.Text(
            self.frame, height=10, width=50, bg=INPUT_BG_COLOR, fg=TEXT_COLOR,
            wrap=tk.WORD, state='disabled'
        )
        self.text_log.pack(side=tk.LEFT, fill="both", expand=True)
        self.output_canvas = output_canvas
        self.control_frame = tk.Frame(self.frame, bg=BG_COLOR)
        self.control_frame.pack(fill="x")
        self.paused = False
        self.stopped = False
        self.skipped = False
        self.running = False
        self.completed = False
        self.preview_text = None
        self.preview_window = None
        self.is_web_content = False

        # C·∫≠p nh·∫≠t c√°c n√∫t
        self.pause_button = tk.Button(self.control_frame, text="‚è∏Ô∏è", command=self.toggle_pause, bg=BUTTON_BG_COLOR, fg=BUTTON_TEXT_COLOR, relief=tk.FLAT)
        self.pause_button.pack(side=tk.TOP, padx=2, pady=2, fill="x")
        self.skip_button = tk.Button(self.control_frame, text="‚è≠Ô∏è", command=self.skip, bg=BUTTON_BG_COLOR, fg=BUTTON_TEXT_COLOR, relief=tk.FLAT)
        self.skip_button.pack(side=tk.TOP, padx=2, pady=2, fill="x")
        self.stop_button = tk.Button(self.control_frame, text="‚èπÔ∏è", command=self.stop, bg=BUTTON_BG_COLOR, fg=BUTTON_TEXT_COLOR, relief=tk.FLAT)
        self.stop_button.pack(side=tk.TOP, padx=2, pady=2, fill="x")
        self.hide_button = tk.Button(self.control_frame, text="‚ùå", command=self.hide, bg=BUTTON_BG_COLOR, fg=BUTTON_TEXT_COLOR, relief=tk.FLAT)
        self.hide_button.pack(side=tk.TOP, padx=2, pady=2, fill="x")
        self.preview_button = tk.Button(self.control_frame, text="üëÄ", command=self.show_preview, bg=BUTTON_BG_COLOR, fg=BUTTON_TEXT_COLOR, relief=tk.FLAT)
        self.export_button = tk.Button(self.control_frame, text="üì§", command=self.export_web_content, bg=BUTTON_BG_COLOR, fg=BUTTON_TEXT_COLOR, relief=tk.FLAT)

    def log(self, message):
        if not hasattr(self, 'log_scrollbar'):
            self.log_scrollbar = tk.Scrollbar(self.frame)
            self.log_scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
            self.text_log.configure(yscrollcommand=self.log_scrollbar.set)
            self.log_scrollbar.config(command=self.text_log.yview)

        self.text_log.configure(state='normal')
        self.text_log.insert(tk.END, message + "\n")
        self.text_log.see(tk.END)
        self.text_log.configure(state='disabled')

    def toggle_pause(self):
        self.paused = not self.paused
        self.pause_button.config(text="‚ñ∂Ô∏è" if self.paused else "‚è∏Ô∏è")
        self.log("ƒê√£ t·∫°m d·ª´ng." if self.paused else "ƒê√£ ti·∫øp t·ª•c.")

    def skip(self):
        self.skipped = True
        self.log("ƒê√£ b·ªè qua.")

    def stop(self):
        self.stopped = True
        self.running = False
        self.log("ƒê√£ d·ª´ng.")
        self.hide()

    def hide(self):
        self.running = False
        self.frame.master.grid_remove()

    def check_control(self):
        if self.stopped:
            raise RuntimeError("ƒê√£ d·ª´ng b·ªüi ng∆∞·ªùi d√πng.")
        if self.paused:
            self.log("ƒêang t·∫°m d·ª´ng... ƒë·ª£i ti·∫øp t·ª•c.")
            while self.paused and not self.stopped and not self.completed:
                self.frame.update()
        if self.skipped:
            self.log("ƒê√£ b·ªè qua b∆∞·ªõc.")
            self.skipped = False
            raise RuntimeError("B∆∞·ªõc b·ªã b·ªè qua b·ªüi ng∆∞·ªùi d√πng.")

    def mark_completed(self):
        self.completed = True
        self.log("ƒê√£ ho√†n th√†nh t·∫•t c·∫£ c√°c b∆∞·ªõc.")
        if self.is_web_content:
            self.preview_button.pack(side=tk.LEFT, padx=2)
            self.export_button.pack(side=tk.LEFT, padx=2)
        else:
            self.preview_button.pack_forget()
            self.export_button.pack_forget()

    def start(self):
        self.running = True
        while self.running:
            self.frame.update()

    def stop_dashboard(self):
        self.running = False
        self.frame.destroy()

    def show_preview(self):
        import subprocess
        import shutil
        from tempfile import NamedTemporaryFile
        from runner import get_web_content

        try:
            html = get_web_content()
            if not html or "<html" not in html.lower():
                self.log("Kh√¥ng c√≥ n·ªôi dung HTML.")
                return

            with NamedTemporaryFile(delete=False, suffix=".html", mode="w", encoding="utf-8") as f:
                f.write(html)
                temp_file_path = f.name

            edge_path = shutil.which("msedge") or shutil.which("C:\\Program Files (x86)\\Microsoft\\Edge\\Application\\msedge.exe")
            if not edge_path:
                self.log("Kh√¥ng t√¨m th·∫•y tr√¨nh duy·ªát Microsoft Edge.")
                return

            subprocess.Popen([edge_path, temp_file_path])
            self.log("ƒê√£ m·ªü Microsoft Edge ƒë·ªÉ xem th·ª≠.")

        except Exception as e:
            self.log(f"L·ªói xem th·ª≠: {e}")

    def export_web_content(self):
        from tkinter import filedialog
        from runner import get_web_content

        html = get_web_content()
        if not html or "<html" not in html.lower():
            self.log("Kh√¥ng c√≥ n·ªôi dung HTML.")
            return

        file_path = filedialog.asksaveasfilename(
            title="L∆∞u file HTML",
            defaultextension=".html",
            filetypes=[("HTML Files", "*.html"), ("All Files", "*.*")]
        )

        if not file_path:
            self.log("ƒê√£ h·ªßy xu·∫•t.")
            return

        try:
            with open(file_path, "w", encoding="utf-8") as f:
                f.write(html)
            self.log(f"N·ªôi dung HTML ƒë√£ xu·∫•t t·ªõi: {file_path}")
        except Exception as e:
            self.log(f"L·ªói xu·∫•t: {e}")

    def update_preview(self, content, is_web_content=False):
        self.is_web_content = is_web_content
        if self.preview_text:
            self.preview_text.set_html(content)
        if is_web_content and self.completed:
            self.preview_button.pack(side=tk.LEFT, padx=2)
            self.export_button.pack(side=tk.LEFT, padx=2)
        else:
            self.preview_button.pack_forget()
            self.export_button.pack_forget()

    def refresh_preview(self):
        self.log("ƒêang l√†m m·ªõi b·∫£n xem th·ª≠...")
        try:
            from runner import get_web_content
            new_content = get_web_content()
            self.update_preview(new_content, self.is_web_content)
        except Exception as e:
            self.log(f"L·ªói l·∫•y n·ªôi dung web: {e}")

class FileProcessor:
    def __init__(self):
        self.file_paths = []

    def load_files(self, paths):
        for path in paths:
            if path not in self.file_paths:
                self.file_paths.append(path)
                add_message_to_canvas(f"ƒê√£ t·∫£i: {os.path.basename(path)}", "success")
                add_file_preview_to_canvas(path)
    def open_file_dialog(self):
        file_paths = filedialog.askopenfilenames(filetypes=[("All Files", "*.*")])
        if file_paths:
            self.load_files(file_paths)

    def process_files(self):
        if not self.file_paths:
            add_message_to_canvas("Ch∆∞a c√≥ file n√†o ƒë∆∞·ª£c t·∫£i.", "error")
            return []

        parts = []
        max_chunk_size = 20000

        for file_path in self.file_paths:
            text = extract_text_from_file(file_path)
            chunks = split_text_smart(text, max_chunk_size)
            for i, chunk in enumerate(chunks):
                parts.append((f"{os.path.basename(file_path)} [Ph·∫ßn {i+1}]", chunk))

        return parts

    def clear_files(self):
        self.file_paths = []
        add_message_to_canvas("ƒê√£ x√≥a t·∫•t c·∫£ c√°c file.", "info")

# Canvas Management
def handle_drop(event):
    import re
    raw = event.data.strip()

    # Lo·∫°i b·ªè d·∫•u ngo·∫∑c nh·ªçn bao quanh n·∫øu c√≥
    if raw.startswith("{") and raw.endswith("}"):
        raw = raw[1:-1]

    # N·∫øu k√©o nhi·ªÅu file th√¨ s·∫Ω c√≥ chu·ªói nh∆∞: {C:/file 1.txt} {C:/file 2.txt}
    # T√°ch ch√≠nh x√°c t·ª´ng file b·∫±ng regex (d√πng ƒë·ªÉ b·∫Øt c·∫£ ƒë∆∞·ªùng d·∫´n c√≥ d·∫•u c√°ch)
    pattern = r'{(.*?)}' if "{" in event.data else r'".+?"|\S+'
    files = re.findall(pattern, event.data)

    # L√†m s·∫°ch d·∫•u nh√°y n·∫øu c√≥
    cleaned_files = [f.strip('"') for f in files if os.path.isfile(f.strip('"'))]

    if cleaned_files:
        file_processor.load_files(cleaned_files)
    else:
        add_message_to_canvas("‚ùå Kh√¥ng t√¨m th·∫•y file h·ª£p l·ªá trong d·ªØ li·ªáu k√©o th·∫£.", "error")

def start_new_session():
    global chat_session, chat_history
    chat_session = []
    update_sidebar()
    clear_canvas()
    #add_message_to_canvas("ƒê√£ b·∫Øt ƒë·∫ßu chat m·ªõi.", "success")
    input_text.focus_set()  # ‚úÖ Focus l·∫°i khung nh·∫≠p m·ªói khi b·∫Øt ƒë·∫ßu

def delete_chat_session(index):
    if messagebox.askyesno("X√°c nh·∫≠n", "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a chat n√†y?"):
        chat_history.pop(index)
        save_chat_history(chat_history)
        update_sidebar()

def update_sidebar():
    for widget in chat_listbox_frame.winfo_children():
        widget.destroy()

    for i in range(len(chat_history)):
        title = next((msg['content'][:20] for msg in chat_history[i] if msg['role'] == 'user'), f"Chat {i+1}")

        frame = tk.Frame(chat_listbox_frame, bg=SIDEBAR_BG_COLOR)
        frame.pack(fill="x", padx=5, pady=2)

        label = tk.Label(frame, text=title, bg=SIDEBAR_BG_COLOR, fg=TEXT_COLOR, font=("Segoe UI", 11), anchor="w")
        label.pack(side="left", fill="x", expand=True)
        label.bind("<Button-1>", lambda event, idx=i: show_chat_session(idx))

        delete_button = tk.Button(frame, text="‚ùå", command=lambda idx=i: delete_chat_session(idx), bg=SIDEBAR_BG_COLOR, fg=TEXT_COLOR, font=("Segoe UI", 10), relief="flat")
        delete_button.pack(side="right")

def clear_canvas():
    for widget in output_canvas.winfo_children():
        widget.destroy()
    output_canvas.delete("all")
    output_canvas.yview_moveto(0)
    global current_y
    current_y = 10

def add_message_to_canvas(message, tag):
    global current_y

    if tag == "agent":
        display_text = f"ü§ñ Agent: {message}"
    elif tag == "user":
        display_text = f"üë§ B·∫°n: {message}"
    else:
        display_text = message

    msg_frame = tk.Frame(
        output_canvas,
        bg=MSG_BG_COLORS.get(tag, BG_COLOR),
        padx=10,
        pady=5,
        borderwidth=2,
        relief="groove"
    )
    msg_frame.columnconfigure(0, weight=1)

    msg_text = tk.Text(
        msg_frame,
        font=("Segoe UI", 12),
        wrap="word",
        height=1,
        bg=MSG_BG_COLORS.get(tag, BG_COLOR),
        fg=TEXT_COLOR,
        relief="flat",
        bd=0
    )
    msg_text.insert("1.0", display_text)

    num_lines = display_text.count('\n') + 1
    avg_chars_per_line = 60
    estimated_lines = max(num_lines, len(display_text) // avg_chars_per_line + 1)
    msg_text.configure(height=estimated_lines)
    msg_text.configure(state="disabled")
    msg_text.grid(row=0, column=0, sticky="ew")

    copy_button = tk.Button(
        msg_frame,
        text="Sao ch√©p",
        command=lambda: pyperclip.copy(message),
        bg=BUTTON_BG_COLOR,
        fg=BUTTON_TEXT_COLOR,
        relief="flat",
        padx=8,
        pady=3
    )
    copy_button.grid(row=1, column=0, sticky="se", columnspan=2)

    output_canvas.update_idletasks()
    canvas_width = output_canvas.winfo_width()
    msg_width = min(700, canvas_width - 60)
    msg_frame.configure(width=msg_width)
    msg_frame.pack_propagate(False)

    # ‚úÖ Ch√≠nh x√°c h√≥a v·ªã tr√≠: user b√™n ph·∫£i, agent b√™n tr√°i
    if tag == "user":
        x_pos = canvas_width - msg_width - 20  # s√°t l·ªÅ ph·∫£i
        anchor = "nw"
    else:
        x_pos = 20  # s√°t l·ªÅ tr√°i
        anchor = "nw"

    output_canvas.create_window((x_pos, current_y), window=msg_frame, anchor=anchor)
    output_canvas.update_idletasks()
    current_y += msg_frame.winfo_reqheight() + 10
    output_canvas.configure(scrollregion=output_canvas.bbox("all"))
    output_canvas.yview_moveto(1)

def show_chat_session(index):
    clear_canvas()
    add_message_to_canvas(f"Chat #{index+1}", "success")
    for message in chat_history[index]:
        add_message_to_canvas(message['content'], message["role"])

    output_canvas.configure(scrollregion=output_canvas.bbox("all"))
    output_canvas.yview_moveto(0)

# Core Interaction
def process_input():
    prompt = input_text.get("1.0", tk.END).strip()
    if not prompt:
        return

    if prompt.lower() in ["darkmode", "lightmode"]:
        set_theme(prompt.lower())
        add_message_to_canvas(f"ƒê√£ chuy·ªÉn sang {prompt.lower()}.","success")
        input_text.delete("1.0", tk.END)
        return

    add_message_to_canvas(prompt, "user")
    chat_session.append({"role": "user", "content": prompt})
    input_text.delete("1.0", tk.END)

    # ‚úÖ ƒê·∫£m b·∫£o lu√¥n c·∫≠p nh·∫≠t v√†o chat_history
    if not chat_history or chat_session is not chat_history[0]:
        chat_history.insert(0, chat_session)
    save_chat_history(chat_history)
    update_sidebar()

    def run_prompt():
        try:
            from gemini_client import chat
            from runner import handle_prompt, get_web_content

            #add_message_to_canvas("ƒêang x·ª≠ l√Ω ...", "info")

            if prompt.startswith("*"):
                #add_message_to_canvas("ƒêang x·ª≠ l√Ω ...", "info")
                system_info = f"H·ªá ƒëi·ªÅu h√†nh: {platform.system()} {platform.release()} | Phi√™n b·∫£n: {platform.version()} | Ki·∫øn tr√∫c: {platform.machine()}"

                dashboard_frame.grid()
                dashboard = Dashboard(dashboard_frame, output_canvas)
                dashboard_thread = threading.Thread(target=dashboard.start, daemon=True)
                dashboard_thread.start()
                handle_prompt(prompt, dashboard.log, system_info, dashboard=dashboard)

                add_message_to_canvas("Th√†nh c√¥ng." if not dashboard.stopped else "Th·∫•t b·∫°i.", "success" if not dashboard.stopped else "error")

                if not dashboard.stopped:
                    dashboard.text_log.configure(state='normal')
                    result_text = dashboard.text_log.get("1.0", tk.END).strip()
                    dashboard.text_log.configure(state='disabled')

                    if result_text:
                        add_message_to_canvas(result_text, "agent")  # ‚úÖ Hi·ªÉn th·ªã l√™n chat
                        chat_session.append({"role": "agent", "content": result_text})
                        chat_history[0] = chat_session
                        save_chat_history(chat_history)
                        update_sidebar()

            else:
                responses = []

                if file_processor.file_paths:
                    for file_path in file_processor.file_paths:
                        try:
                            ext = file_path.lower()
                            if ext.endswith((".png", ".jpg", ".jpeg", ".bmp")):
                                img = Image.open(file_path)
                                response = chat.model.generate_content([prompt, img])
                            elif ext.endswith((".py", ".txt", ".log", ".json", ".csv")):
                                with open(file_path, "r", encoding="utf-8", errors="ignore") as f:
                                    file_text = f.read()
                                combined_prompt = f"{prompt}\n\nN·ªôi dung file {os.path.basename(file_path)}:\n\n{file_text}"
                                response = chat.send_message(combined_prompt)
                            else:
                                file_text = extract_text_from_file(file_path)
                                combined_prompt = f"{prompt}\n\nN·ªôi dung file:\n{file_text}"
                                response = chat.send_message(combined_prompt)

                            content = response.parts[0].text.strip() if response.parts and response.parts[0].text.strip() else "[Kh√¥ng c√≥ ph·∫£n h·ªìi t·ª´ Agent]"
                            responses.append(content)
                            add_message_to_canvas(content, "agent")

                        except Exception as e:
                            error_msg = f"L·ªói x·ª≠ l√Ω file {os.path.basename(file_path)}: {e}"
                            add_message_to_canvas(error_msg, "error")

                else:
                    try:
                        vietnamese_prompt = (
                            "Tr·∫£ l·ªùi B·∫ÆT BU·ªòC b·∫±ng ti·∫øng Vi·ªát. Kh√¥ng d·ªãch, kh√¥ng gi·∫£i th√≠ch th√™m.\n\n"
                            f"{prompt}"
                        )
                        response = chat.send_message(vietnamese_prompt)
                        content = response.parts[0].text.strip() if response.parts and response.parts[0].text.strip() else "[Kh√¥ng c√≥ ph·∫£n h·ªìi t·ª´ Agent]"
                        add_message_to_canvas(content, "agent")
                        responses.append(content)
                    except Exception as e:
                        add_message_to_canvas(f"L·ªói khi ph·∫£n h·ªìi: {e}", "error")

                if responses:
                    full_response = "\n\n".join(responses)
                    chat_session.append({"role": "agent", "content": full_response})
                    chat_history[0] = chat_session
                    save_chat_history(chat_history)
                    update_sidebar()

        except Exception as e:
            add_message_to_canvas(f"‚ùå L·ªói t·ªïng: {e}", "error")
            if 'dashboard' in locals():
                dashboard.stop_dashboard()
                dashboard_frame.grid_remove()

    threading.Thread(target=run_prompt, daemon=True).start()

def add_file_preview_to_canvas(file_path):
    from PIL import ImageTk
    import mimetypes

    frame = tk.Frame(output_canvas, bg=MSG_BG_COLORS["info"], padx=10, pady=5, relief="groove", borderwidth=2)
    frame.columnconfigure(0, weight=1)

    file_name = os.path.basename(file_path)
    label = tk.Label(frame, text=f"üìé {file_name}", font=("Segoe UI", 12), bg=MSG_BG_COLORS["info"], fg=TEXT_COLOR, anchor="w", cursor="hand2")
    label.grid(row=0, column=0, sticky="ew")

    def open_preview():
        ext = file_path.lower()
        try:
            if ext.endswith((".png", ".jpg", ".jpeg", ".bmp")):
                top = tk.Toplevel(root)
                top.title(file_name)
                img = Image.open(file_path)

                # X·ª≠ l√Ω t∆∞∆°ng th√≠ch v·ªõi Pillow >=10
                try:
                    resample_filter = Image.Resampling.LANCZOS
                except AttributeError:
                    resample_filter = Image.ANTIALIAS  # Cho Pillow < 10

                img = img.resize((min(800, img.width), min(600, img.height)), resample_filter)
                photo = ImageTk.PhotoImage(img)

                panel = tk.Label(top, image=photo)
                panel.image = photo
                panel.pack()

            elif ext.endswith((".xlsx", ".csv")):
                df = pd.read_excel(file_path) if ext.endswith(".xlsx") else pd.read_csv(file_path)
                top = tk.Toplevel(root)
                top.title(file_name)

                text_widget = tk.Text(top, wrap="none", font=("Courier New", 10))
                text_widget.insert("1.0", df.to_string(index=False))
                text_widget.pack(fill="both", expand=True)

                # Cho ph√©p copy, ch·∫∑n ch·ªânh s·ª≠a
                text_widget.bind("<Key>", lambda e: "break")

                copy_btn = tk.Button(top, text="üìã Sao ch√©p t·∫•t c·∫£", command=lambda: pyperclip.copy(text_widget.get("1.0", tk.END)))
                copy_btn.pack(pady=5)

            else:
                content = extract_text_from_file(file_path)
                top = tk.Toplevel(root)
                top.title(file_name)

                text_widget = tk.Text(top, wrap="word", font=("Segoe UI", 11))
                text_widget.insert("1.0", content)
                text_widget.pack(fill="both", expand=True)

                # Cho ph√©p copy, ch·∫∑n ch·ªânh s·ª≠a
                text_widget.bind("<Key>", lambda e: "break")

                copy_btn = tk.Button(top, text="üìã Sao ch√©p t·∫•t c·∫£", command=lambda: pyperclip.copy(text_widget.get("1.0", tk.END)))
                copy_btn.pack(pady=5)

        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ xem tr∆∞·ªõc file:\n{e}")

    label.bind("<Button-1>", lambda e: open_preview())

    global current_y
    output_canvas.create_window((30, current_y), window=frame, anchor="nw")
    output_canvas.update_idletasks()
    current_y += frame.winfo_reqheight() + 10
    output_canvas.configure(scrollregion=output_canvas.bbox("all"))

# Theme Management
def set_theme(theme):
    global current_theme
    current_theme = theme
    colors = THEMES.get(theme, THEMES["darkmode"])
    root.configure(bg=colors["bg"])
    sidebar_frame.configure(bg=colors["bg"])
    chat_listbox_frame.configure(bg=colors["bg"])
    new_chat_button.configure(bg=colors["bg"], fg=colors["fg"])
    main_frame.configure(bg=colors["bg"])
    output_canvas.configure(bg=colors["bg"])
    bottom_frame.configure(bg=colors["bg"])
    input_text.configure(bg=colors["text"], fg=colors["fg"], insertbackground=colors["fg"])
    button_frame.configure(bg=colors["bg"])
    separator_line.configure(bg=colors["border"])

# --- Style Constants ---
FONT = ("Segoe UI", 12)
TEXT_COLOR = "#ffffff"
BG_COLOR = "#2a2a2a"
SIDEBAR_BG_COLOR = "#333333"
INPUT_BG_COLOR = "#444444"
BUTTON_BG_COLOR = "#555555"
BUTTON_TEXT_COLOR = "#ffffff"

MSG_BG_COLORS = {
    "user": "#4CAF50",
    "agent": "#3F51B5",
    "success": "#43A047",
    "error": "#D32F2F",
    "info": "#1976D2"
}

THEMES = {
    "darkmode": {"bg": "#2a2a2a", "text": "#333333", "fg": "#ffffff", "border": "#444"},
    "lightmode": {"bg": "#f0f0f0", "text": "#ffffff", "fg": "#000000", "border": "#ccc"}
}

# --- Initialization ---
REQUIRED_LIBS = [
    ("tkinterdnd2", "tkinterdnd2"),
    ("pillow", "PIL"),
    ("pytesseract", "pytesseract"),
    ("python-docx", "docx"),
    ("pymupdf", "fitz"),
    ("pandas", "pandas"),
    ("tkhtmlview", "tkhtmlview"),
    ("pyperclip", "pyperclip")
]

for lib, module in REQUIRED_LIBS:
    ensure_lib_installed(lib, module)

chat_history = load_chat_history()
chat_session = []
current_theme = "darkmode"
file_processor = FileProcessor()
current_y = 10

# --- Main Window ---
root = TkinterDnD.Tk()
root.title("Smart Agent")
root.state("zoomed")

# --- Layout ---
root.grid_rowconfigure(0, weight=1)
root.grid_columnconfigure(1, weight=1)

# Sidebar
sidebar_frame = tk.Frame(root, width=250, bg=SIDEBAR_BG_COLOR)
sidebar_frame.grid(row=0, column=0, sticky="nsw")
sidebar_frame.pack_propagate(False)

new_chat_button = tk.Button(sidebar_frame, text="Cu·ªôc h·ªôi tho·∫°i m·ªõi", command=start_new_session, bg="#666", fg="#fff", font=("Segoe UI", 11), relief="raised", bd=2)
new_chat_button.pack(fill="x", padx=5, pady=5)

chat_listbox_frame = tk.Frame(sidebar_frame, bg=SIDEBAR_BG_COLOR)
chat_listbox_frame.pack(fill="both", expand=True, padx=5, pady=5)

update_sidebar()

# Main Area
main_frame = tk.Frame(root, bg=BG_COLOR)
main_frame.grid(row=0, column=1, sticky="nsew")
main_frame.grid_rowconfigure(0, weight=1)
main_frame.grid_columnconfigure(0, weight=1)
main_frame.grid_columnconfigure(1, weight=0)

# Chat Canvas
output_canvas = tk.Canvas(main_frame, bg=BG_COLOR, bd=0, highlightthickness=0)
scrollbar = tk.Scrollbar(main_frame, orient="vertical", command=output_canvas.yview)
output_canvas.configure(yscrollcommand=scrollbar.set)
bind_mousewheel(output_canvas, output_canvas.yview)

output_canvas.grid(row=0, column=0, sticky="nsew", padx=5, pady=5)
scrollbar.grid(row=0, column=1, sticky="ns")

separator_line = tk.Frame(main_frame, height=1, bg="#444")
separator_line.grid(row=1, column=0, sticky="ew", pady=5)

# Input Area
bottom_frame = tk.Frame(main_frame, bg=BG_COLOR)
bottom_frame.grid(row=2, column=0, sticky="ew", padx=5, pady=5)
bottom_frame.grid_columnconfigure(0, weight=1)

input_text = tk.Text(bottom_frame, height=3, font=FONT, bg=INPUT_BG_COLOR, fg=TEXT_COLOR, insertbackground=TEXT_COLOR, bd=0, highlightthickness=0)
input_text.grid(row=0, column=0, sticky="ew", padx=5, pady=5)

# Buttons
button_frame = tk.Frame(bottom_frame, bg=BG_COLOR)
button_frame.grid(row=0, column=1, sticky="e")

import_button = tk.Button(button_frame, text="ƒê√≠nh k√®m üìé", command=file_processor.open_file_dialog, bg=BUTTON_BG_COLOR, fg=BUTTON_TEXT_COLOR, font=FONT, relief="flat", bd=0, highlightthickness=0)
import_button.pack(side="right", padx=5, pady=5, fill="y", ipadx=10, ipady=10)

send_button = tk.Button(button_frame, text="G·ª≠i", command=process_input, bg=BUTTON_BG_COLOR, fg=BUTTON_TEXT_COLOR, font=FONT, relief="flat", bd=0, highlightthickness=0)
send_button.pack(side="right", padx=5, pady=5, fill="y", ipadx=10, ipady=10)

# Dashboard
dashboard_frame = tk.Frame(main_frame, bg=BG_COLOR, width=400)
dashboard_frame.grid(row=0, column=2, rowspan=3, sticky="nsew", padx=5, pady=5)
dashboard_frame.grid_remove()

# --- Bindings ---
def handle_paste(event):
    import tempfile
    from PIL import ImageGrab

    # 1. Th·ª≠ ki·ªÉu Windows Explorer (copy file)
    try:
        clipboard_data = root.clipboard_get(type="CF_HDROP")
        if clipboard_data:
            files = clipboard_data.strip().split("\n")
            file_processor.load_files(files)
            add_message_to_canvas("üìÇ ƒê√£ d√°n v√† t·∫£i file t·ª´ clipboard.", "success")
            return "break"
    except tk.TclError:
        pass  # Kh√¥ng ph·∫£i ki·ªÉu CF_HDROP, th·ª≠ c√°ch kh√°c

    # 2. Th·ª≠ ki·ªÉu text ch·ª©a path (copy path ho·∫∑c drag-drop fail)
    try:
        text_data = root.clipboard_get().strip()
        if os.path.isfile(text_data):
            file_processor.load_files([text_data])
            add_message_to_canvas("üìÑ ƒê√£ d√°n file t·ª´ clipboard (d·∫°ng text).", "success")
            return "break"
    except Exception:
        pass

    # 3. Th·ª≠ xem clipboard c√≥ ·∫£nh (image data t·ª´ snipping tool, Ctrl+C ·∫£nh)
    try:
        image = ImageGrab.grabclipboard()
        if isinstance(image, Image.Image):
            temp_img_path = os.path.join(tempfile.gettempdir(), "clipboard_image.png")
            image.save(temp_img_path)
            file_processor.load_files([temp_img_path])
            add_message_to_canvas("üñºÔ∏è ƒê√£ d√°n ·∫£nh t·ª´ clipboard.", "success")
            return "break"
    except Exception as e:
        add_message_to_canvas(f"L·ªói khi x·ª≠ l√Ω ·∫£nh clipboard: {e}", "error")

    # 4. N·∫øu kh√¥ng x·ª≠ l√Ω ƒë∆∞·ª£c g√¨
    add_message_to_canvas("‚ùå Clipboard kh√¥ng ch·ª©a n·ªôi dung h·ª£p l·ªá (file/·∫£nh/text path).", "error")
    return "break"


input_text.bind("<Control-v>", handle_paste)
input_text.bind("<Return>", lambda event: [process_input(), "break"])
root.drop_target_register(DND_FILES)
root.dnd_bind("<<Drop>>", handle_drop)

# --- Start ---
input_text.focus_set()
set_theme("darkmode")
root.mainloop()
